import { useMutation, useQueryClient } from '@tanstack/react-query'
import { supabase } from '../../../lib/supabase'
import { REMUNERACAO_QUERY_KEYS } from './useRemuneracaoData'
import type { RemuneracaoExportRequest } from '../types/remuneracao.types'
import toast from 'react-hot-toast'

/**
 * Hook dedicado para exporta√ß√£o de remunera√ß√µes
 */
export const useRemuneracaoExport = () => {
  const queryClient = useQueryClient()
  
  return useMutation({
    mutationFn: async (request: RemuneracaoExportRequest = {}) => {
      console.log('üéÜ Iniciando exporta√ß√£o de remunera√ß√µes...', request)
      
      const { data, error } = await supabase.functions.invoke('remuneracoes-export', {
        body: request
      })

      if (error) {
        console.error('‚ùå Erro na edge function:', error)
        throw new Error(`Erro ao exportar remunera√ß√µes: ${error.message}`)
      }

      console.log('‚úÖ Dados recebidos da edge function:', !!data?.data)
      return data.data
    },
    onMutate: () => {
      console.log('üíº Iniciando processo de exporta√ß√£o...')
      toast.loading('Preparando exporta√ß√£o...', {
        id: 'export-loading'
      })
    },
    onSuccess: (data) => {
      console.log('üéâ Exporta√ß√£o conclu√≠da:', {
        records: data.total_records,
        amount: data.total_amount,
        filename: data.file_name
      })
      
      // Remover loading
      toast.dismiss('export-loading')
      
      // Toast de sucesso
      toast.success(`Exporta√ß√£o conclu√≠da!\n${data.total_records} remunera√ß√µes exportadas\nTotal: R$ ${data.total_amount.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`, {
        duration: 6000
      })
      
      // Invalidar hist√≥rico se existir
      queryClient.invalidateQueries({ queryKey: REMUNERACAO_QUERY_KEYS.exportHistory })
      
      // Download autom√°tico
      try {
        const blob = new Blob([data.csv_content], { type: 'text/csv;charset=utf-8' })
        const url = window.URL.createObjectURL(blob)
        const link = document.createElement('a')
        link.href = url
        link.download = data.file_name
        link.style.display = 'none'
        document.body.appendChild(link)
        link.click()
        document.body.removeChild(link)
        window.URL.revokeObjectURL(url)
        
        console.log('üì• Download iniciado:', data.file_name)
      } catch (downloadError) {
        console.error('‚ùå Erro no download:', downloadError)
        toast.error('Exporta√ß√£o conclu√≠da, mas houve erro no download autom√°tico')
      }
    },
    onError: (error: Error) => {
      console.error('‚ùå Erro na exporta√ß√£o:', error)
      toast.dismiss('export-loading')
      toast.error(`Erro na exporta√ß√£o: ${error.message}`, {
        duration: 8000
      })
    }
  })
}