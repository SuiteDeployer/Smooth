// Backup do hook original useUserManagement.ts
// Esta versão será mantida como referência

import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'
import { supabase } from '../lib/supabase'
import { useAuth } from '../contexts/AuthContext'

const SUPABASE_URL = 'https://cisoewbdzdxombthxqfi.supabase.co'

interface CreateUserData {
  email: string
  full_name: string
  role_name: string
  cpf_cnpj?: string
  phone?: string
  commission_percentage?: number
}

export function useUserManagement() {
  const { user } = useAuth()
  const queryClient = useQueryClient()

  // Buscar papéis disponíveis para criação
  const availableRoles = useQuery({
    queryKey: ['available-roles'],
    queryFn: async () => {
      if (!user) throw new Error('Usuário não autenticado')

      const response = await fetch(
        `${SUPABASE_URL}/functions/v1/user-management?action=get_available_roles`,
        {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${(await supabase.auth.getSession()).data.session?.access_token}`,
            'Content-Type': 'application/json'
          }
        }
      )

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error?.message || 'Erro ao buscar papéis disponíveis')
      }

      const data = await response.json()
      return data.data
    },
    enabled: !!user
  })

  // Buscar usuários subordinados
  const subordinates = useQuery({
    queryKey: ['subordinates'],
    queryFn: async () => {
      if (!user) throw new Error('Usuário não autenticado')

      const response = await fetch(
        `${SUPABASE_URL}/functions/v1/user-management?action=get_subordinates`,
        {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${(await supabase.auth.getSession()).data.session?.access_token}`,
            'Content-Type': 'application/json'
          }
        }
      )

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error?.message || 'Erro ao buscar subordinados')
      }

      const data = await response.json()
      return data.data
    },
    enabled: !!user
  })

  // Criar novo usuário
  const createUser = useMutation({
    mutationFn: async (userData: CreateUserData) => {
      if (!user) throw new Error('Usuário não autenticado')

      const session = await supabase.auth.getSession()
      
      const response = await fetch(
        `${SUPABASE_URL}/functions/v1/user-management?action=create_user`,
        {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${session.data.session?.access_token}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(userData)
        }
      )

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error?.message || 'Erro ao criar usuário')
      }

      return response.json()
    },
    onSuccess: () => {
      // Atualizar lista de subordinados
      queryClient.invalidateQueries({ queryKey: ['subordinates'] })
    }
  })

  return {
    availableRoles,
    subordinates,
    createUser
  }
}